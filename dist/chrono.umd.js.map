{"version":3,"file":"chrono.umd.js","sources":["../src/core/Chrono.ts","../src/index.ts"],"sourcesContent":["import type { CallbackEntry, ChronoOptions } from '../types';\n\nexport class Chrono {\n  private callbacks: CallbackEntry[] = [];\n  private now = 0;\n  private rafId: number | null = null;\n  private isRunning = false;\n  private maxFPS = 0;\n  private lastFrameTime = 0;\n  private frameInterval = 0;\n  private isFirstFrame = true;\n\n  constructor(options: ChronoOptions = {}) {\n    this.now = performance.now();\n    this.maxFPS = options.maxFPS || 0;\n    this.frameInterval = this.maxFPS ? 1000 / this.maxFPS : 0;\n    this.raf = this.raf.bind(this);\n\n    if (options.autoStart !== false) {\n      this.start();\n    }\n  }\n\n  /**\n   * Starts the animation loop\n   */\n  public start(): void {\n    if (!this.isRunning) {\n      this.isRunning = true;\n      this.lastFrameTime = performance.now();\n      this.isFirstFrame = true;\n      this.rafId = requestAnimationFrame(this.raf);\n    }\n  }\n\n  /**\n   * Stops the animation loop\n   */\n  public stop(): void {\n    if (this.isRunning && this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.isRunning = false;\n      this.rafId = null;\n    }\n  }\n\n  /**\n   * Adds a callback to the requestAnimationFrame loop with an optional priority.\n   * @param callback - The function to call each frame\n   * @param priority - The priority of the callback. Lower numbers run earlier\n   * @returns A function to remove the callback from the loop\n   */\n  public add(\n    callback: (timestamp: number, deltaTime: number) => void,\n    priority = 0\n  ): () => void {\n    this.callbacks.push({ callback, priority });\n    this.callbacks.sort((a, b) => a.priority - b.priority);\n\n    return () => this.remove(callback);\n  }\n\n  /**\n   * Removes a callback from the requestAnimationFrame loop.\n   * @param callback - The function to remove\n   */\n  public remove(callback: (timestamp: number, deltaTime: number) => void): void {\n    this.callbacks = this.callbacks.filter(({ callback: cb }) => callback !== cb);\n  }\n\n  /**\n   * Clears all callbacks from the loop\n   */\n  public clear(): void {\n    this.callbacks = [];\n  }\n\n  /**\n   * Gets the current list of callbacks\n   */\n  public getCallbacks(): CallbackEntry[] {\n    return [...this.callbacks];\n  }\n\n  /**\n   * The requestAnimationFrame loop handler.\n   * @param now - The current timestamp\n   * @internal This method is exposed for testing purposes only\n   */\n  public raf(now: number): void {\n    if (!this.isRunning) return;\n\n    const deltaTime = now - this.now;\n    this.now = now;\n\n    // FPS limiting\n    if (this.maxFPS && !this.isFirstFrame) {\n      const elapsed = now - this.lastFrameTime;\n      if (elapsed < this.frameInterval) {\n        this.rafId = requestAnimationFrame(this.raf);\n        return;\n      }\n      this.lastFrameTime = now;\n    }\n\n    // Execute callbacks\n    for (const { callback } of this.callbacks) {\n      try {\n        callback(now, deltaTime);\n      } catch (error) {\n        console.error('Error in animation callback:', error);\n      }\n    }\n\n    // Request next frame after executing callbacks\n    this.rafId = requestAnimationFrame(this.raf);\n    \n    // Mark first frame as complete\n    if (this.isFirstFrame) {\n      this.isFirstFrame = false;\n      this.lastFrameTime = now;\n    }\n  }\n} ","import { Chrono } from './core/Chrono';\nimport type { ChronoOptions } from './types';\n\n/**\n * Creates a new Chrono instance if running in a browser environment.\n * Returns null if running in a non-browser environment.\n * @param options - Optional configuration options for the Chrono instance\n * @returns A new Chrono instance or null\n */\nexport function createChronoInstance(options?: ChronoOptions): Chrono | null {\n  try {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n    return new Chrono(options);\n  } catch (error) {\n    console.warn('Failed to create Chrono instance:', error);\n    return null;\n  }\n}\n\n/**\n * The default Chrono instance for the current environment.\n * Will be null in non-browser environments.\n */\nexport const chronoInstance = createChronoInstance();\n\n// Export the class and types\nexport { Chrono };\nexport type { ChronoOptions };\n\n// Default export\nexport default chronoInstance; "],"names":["Chrono","options","callback","priority","a","b","cb","now","deltaTime","error","createChronoInstance","chronoInstance"],"mappings":"8NAEO,MAAMA,CAAO,CAUlB,YAAYC,EAAyB,GAAI,CATzC,KAAQ,UAA6B,GACrC,KAAQ,IAAM,EACd,KAAQ,MAAuB,KAC/B,KAAQ,UAAY,GACpB,KAAQ,OAAS,EACjB,KAAQ,cAAgB,EACxB,KAAQ,cAAgB,EACxB,KAAQ,aAAe,GAGhB,KAAA,IAAM,YAAY,MAClB,KAAA,OAASA,EAAQ,QAAU,EAChC,KAAK,cAAgB,KAAK,OAAS,IAAO,KAAK,OAAS,EACxD,KAAK,IAAM,KAAK,IAAI,KAAK,IAAI,EAEzBA,EAAQ,YAAc,IACxB,KAAK,MAAM,CAEf,CAKO,OAAc,CACd,KAAK,YACR,KAAK,UAAY,GACZ,KAAA,cAAgB,YAAY,MACjC,KAAK,aAAe,GACf,KAAA,MAAQ,sBAAsB,KAAK,GAAG,EAE/C,CAKO,MAAa,CACd,KAAK,WAAa,KAAK,QAAU,OACnC,qBAAqB,KAAK,KAAK,EAC/B,KAAK,UAAY,GACjB,KAAK,MAAQ,KAEjB,CAQO,IACLC,EACAC,EAAW,EACC,CACZ,YAAK,UAAU,KAAK,CAAE,SAAAD,EAAU,SAAAC,CAAU,CAAA,EACrC,KAAA,UAAU,KAAK,CAACC,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAE9C,IAAM,KAAK,OAAOH,CAAQ,CACnC,CAMO,OAAOA,EAAgE,CACvE,KAAA,UAAY,KAAK,UAAU,OAAO,CAAC,CAAE,SAAUI,CAAA,IAASJ,IAAaI,CAAE,CAC9E,CAKO,OAAc,CACnB,KAAK,UAAY,EACnB,CAKO,cAAgC,CAC9B,MAAA,CAAC,GAAG,KAAK,SAAS,CAC3B,CAOO,IAAIC,EAAmB,CAC5B,GAAI,CAAC,KAAK,UAAW,OAEf,MAAAC,EAAYD,EAAM,KAAK,IAI7B,GAHA,KAAK,IAAMA,EAGP,KAAK,QAAU,CAAC,KAAK,aAAc,CAEjC,GADYA,EAAM,KAAK,cACb,KAAK,cAAe,CAC3B,KAAA,MAAQ,sBAAsB,KAAK,GAAG,EAC3C,MACF,CACA,KAAK,cAAgBA,CACvB,CAGA,SAAW,CAAE,SAAAL,KAAc,KAAK,UAC1B,GAAA,CACFA,EAASK,EAAKC,CAAS,QAChBC,EAAO,CACN,QAAA,MAAM,+BAAgCA,CAAK,CACrD,CAIG,KAAA,MAAQ,sBAAsB,KAAK,GAAG,EAGvC,KAAK,eACP,KAAK,aAAe,GACpB,KAAK,cAAgBF,EAEzB,CACF,CClHO,SAASG,EAAqBT,EAAwC,CACvE,GAAA,CACE,OAAA,OAAO,OAAW,IACb,KAEF,IAAID,EAAOC,CAAO,QAClBQ,EAAO,CACN,eAAA,KAAK,oCAAqCA,CAAK,EAChD,IACT,CACF,CAMa,MAAAE,EAAiBD,EAAqB"}