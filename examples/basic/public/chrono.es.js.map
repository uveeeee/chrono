{"version":3,"file":"chrono.es.js","sources":["../src/core/Chrono.ts","../src/index.ts"],"sourcesContent":["import type { CallbackEntry, ChronoOptions } from '../types';\n\nexport class Chrono {\n  private callbacks: CallbackEntry[] = [];\n  private now = 0;\n  private rafId: number | null = null;\n  private isRunning = false;\n  private maxFPS = 0;\n  private lastFrameTime = 0;\n  private frameInterval = 0;\n  private isFirstFrame = true;\n\n  constructor(options: ChronoOptions = {}) {\n    this.now = performance.now();\n    this.maxFPS = options.maxFPS || 0;\n    this.frameInterval = this.maxFPS ? 1000 / this.maxFPS : 0;\n    this.raf = this.raf.bind(this);\n\n    if (options.autoStart !== false) {\n      this.start();\n    }\n  }\n\n  /**\n   * Starts the animation loop\n   */\n  public start(): void {\n    if (!this.isRunning) {\n      this.isRunning = true;\n      this.lastFrameTime = performance.now();\n      this.isFirstFrame = true;\n      this.rafId = requestAnimationFrame(this.raf);\n    }\n  }\n\n  /**\n   * Stops the animation loop\n   */\n  public stop(): void {\n    if (this.isRunning && this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.isRunning = false;\n      this.rafId = null;\n    }\n  }\n\n  /**\n   * Adds a callback to the requestAnimationFrame loop with an optional priority.\n   * @param callback - The function to call each frame\n   * @param priority - The priority of the callback. Lower numbers run earlier\n   * @returns A function to remove the callback from the loop\n   */\n  public add(\n    callback: (timestamp: number, deltaTime: number) => void,\n    priority = 0\n  ): () => void {\n    this.callbacks.push({ callback, priority });\n    this.callbacks.sort((a, b) => a.priority - b.priority);\n\n    return () => this.remove(callback);\n  }\n\n  /**\n   * Removes a callback from the requestAnimationFrame loop.\n   * @param callback - The function to remove\n   */\n  public remove(callback: (timestamp: number, deltaTime: number) => void): void {\n    this.callbacks = this.callbacks.filter(({ callback: cb }) => callback !== cb);\n  }\n\n  /**\n   * Clears all callbacks from the loop\n   */\n  public clear(): void {\n    this.callbacks = [];\n  }\n\n  /**\n   * Gets the current list of callbacks\n   */\n  public getCallbacks(): CallbackEntry[] {\n    return [...this.callbacks];\n  }\n\n  /**\n   * The requestAnimationFrame loop handler.\n   * @param now - The current timestamp\n   * @internal This method is exposed for testing purposes only\n   */\n  public raf(now: number): void {\n    if (!this.isRunning) return;\n\n    const deltaTime = now - this.now;\n    this.now = now;\n\n    // FPS limiting\n    if (this.maxFPS && !this.isFirstFrame) {\n      const elapsed = now - this.lastFrameTime;\n      if (elapsed < this.frameInterval) {\n        this.rafId = requestAnimationFrame(this.raf);\n        return;\n      }\n      this.lastFrameTime = now;\n    }\n\n    // Execute callbacks\n    for (const { callback } of this.callbacks) {\n      try {\n        callback(now, deltaTime);\n      } catch (error) {\n        console.error('Error in animation callback:', error);\n      }\n    }\n\n    // Request next frame after executing callbacks\n    this.rafId = requestAnimationFrame(this.raf);\n    \n    // Mark first frame as complete\n    if (this.isFirstFrame) {\n      this.isFirstFrame = false;\n      this.lastFrameTime = now;\n    }\n  }\n} ","import { Chrono } from './core/Chrono';\nimport type { ChronoOptions } from './types';\n\n/**\n * Creates a new Chrono instance if running in a browser environment.\n * Returns null if running in a non-browser environment.\n * @param options - Optional configuration options for the Chrono instance\n * @returns A new Chrono instance or null\n */\nexport function createChronoInstance(options?: ChronoOptions): Chrono | null {\n  try {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n    return new Chrono(options);\n  } catch (error) {\n    console.warn('Failed to create Chrono instance:', error);\n    return null;\n  }\n}\n\n/**\n * The default Chrono instance for the current environment.\n * Will be null in non-browser environments.\n */\nexport const chronoInstance = createChronoInstance();\n\n// Export the class and types\nexport { Chrono };\nexport type { ChronoOptions };\n\n// Default export\nexport default chronoInstance; "],"names":["Chrono","options","callback","priority","a","b","cb","now","deltaTime","error","createChronoInstance","chronoInstance"],"mappings":"AAEO,MAAMA,EAAO;AAAA,EAUlB,YAAYC,IAAyB,IAAI;AATzC,SAAQ,YAA6B,IACrC,KAAQ,MAAM,GACd,KAAQ,QAAuB,MAC/B,KAAQ,YAAY,IACpB,KAAQ,SAAS,GACjB,KAAQ,gBAAgB,GACxB,KAAQ,gBAAgB,GACxB,KAAQ,eAAe,IAGhB,KAAA,MAAM,YAAY,OAClB,KAAA,SAASA,EAAQ,UAAU,GAChC,KAAK,gBAAgB,KAAK,SAAS,MAAO,KAAK,SAAS,GACxD,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,GAEzBA,EAAQ,cAAc,MACxB,KAAK,MAAM;AAAA,EAEf;AAAA;AAAA;AAAA;AAAA,EAKO,QAAc;AACf,IAAC,KAAK,cACR,KAAK,YAAY,IACZ,KAAA,gBAAgB,YAAY,OACjC,KAAK,eAAe,IACf,KAAA,QAAQ,sBAAsB,KAAK,GAAG;AAAA,EAE/C;AAAA;AAAA;AAAA;AAAA,EAKO,OAAa;AAClB,IAAI,KAAK,aAAa,KAAK,UAAU,SACnC,qBAAqB,KAAK,KAAK,GAC/B,KAAK,YAAY,IACjB,KAAK,QAAQ;AAAA,EAEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,IACLC,GACAC,IAAW,GACC;AACZ,gBAAK,UAAU,KAAK,EAAE,UAAAD,GAAU,UAAAC,EAAU,CAAA,GACrC,KAAA,UAAU,KAAK,CAACC,GAAGC,MAAMD,EAAE,WAAWC,EAAE,QAAQ,GAE9C,MAAM,KAAK,OAAOH,CAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,OAAOA,GAAgE;AACvE,SAAA,YAAY,KAAK,UAAU,OAAO,CAAC,EAAE,UAAUI,EAAA,MAASJ,MAAaI,CAAE;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA,EAKO,QAAc;AACnB,SAAK,YAAY;EACnB;AAAA;AAAA;AAAA;AAAA,EAKO,eAAgC;AAC9B,WAAA,CAAC,GAAG,KAAK,SAAS;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,IAAIC,GAAmB;AAC5B,QAAI,CAAC,KAAK;AAAW;AAEf,UAAAC,IAAYD,IAAM,KAAK;AAI7B,QAHA,KAAK,MAAMA,GAGP,KAAK,UAAU,CAAC,KAAK,cAAc;AAEjC,UADYA,IAAM,KAAK,gBACb,KAAK,eAAe;AAC3B,aAAA,QAAQ,sBAAsB,KAAK,GAAG;AAC3C;AAAA,MACF;AACA,WAAK,gBAAgBA;AAAA,IACvB;AAGA,eAAW,EAAE,UAAAL,OAAc,KAAK;AAC1B,UAAA;AACF,QAAAA,EAASK,GAAKC,CAAS;AAAA,eAChBC,GAAO;AACN,gBAAA,MAAM,gCAAgCA,CAAK;AAAA,MACrD;AAIG,SAAA,QAAQ,sBAAsB,KAAK,GAAG,GAGvC,KAAK,iBACP,KAAK,eAAe,IACpB,KAAK,gBAAgBF;AAAA,EAEzB;AACF;AClHO,SAASG,EAAqBT,GAAwC;AACvE,MAAA;AACE,WAAA,OAAO,SAAW,MACb,OAEF,IAAID,EAAOC,CAAO;AAAA,WAClBQ,GAAO;AACN,mBAAA,KAAK,qCAAqCA,CAAK,GAChD;AAAA,EACT;AACF;AAMO,MAAME,IAAiBD,EAAqB;"}